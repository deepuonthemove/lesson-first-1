import OpenAI from 'openai';
import { 
  SYSTEM_PROMPT, 
  getUserPrompt, 
  extractTitle, 
  extractKeyConcepts, 
  extractPrerequisites, 
  extractDuration,
  type LessonGenerationOptions 
} from './prompts';

// Initialize OpenAI client lazily to avoid errors when API key is not set
function getOpenAIClient() {
  if (!process.env.OPENAI_API_KEY) {
    throw new Error('OPENAI_API_KEY environment variable is not set');
  }
  return new OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
  });
}

export interface GeneratedLesson {
  title: string;
  content: string;
  estimatedDuration: number;
  difficulty: string;
  keyConcepts: string[];
  prerequisites: string[];
}

export async function generateLessonWithOpenAI(options: LessonGenerationOptions): Promise<GeneratedLesson> {
  const {
    difficulty = 'intermediate',
    duration = 30
  } = options;

  const systemPrompt = SYSTEM_PROMPT;
  const userPrompt = getUserPrompt(options);

  try {
    const openai = getOpenAIClient();
    const completion = await openai.chat.completions.create({
      model: "gpt-5-nano",
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: userPrompt }
      ],
      max_tokens: 4000,
      temperature: 0.7,
    });

    const content = completion.choices[0]?.message?.content;
    if (!content) {
      throw new Error('No content generated by OpenAI');
    }

    // Extract structured information from the generated content
    const title = extractTitle(content);
    const keyConcepts = extractKeyConcepts(content);
    const prerequisites = extractPrerequisites(content);
    const estimatedDuration = extractDuration(content) || duration;

    return {
      title,
      content,
      estimatedDuration,
      difficulty,
      keyConcepts,
      prerequisites
    };
  } catch (error) {
    console.error('OpenAI API error:', error);
    throw new Error(`Failed to generate lesson: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}
