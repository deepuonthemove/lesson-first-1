import { HfInference } from '@huggingface/inference';

// Initialize Hugging Face client lazily to avoid errors when API key is not set
function getHuggingFaceClient() {
  if (!process.env.HUGGINGFACE_API_KEY) {
    throw new Error('HUGGINGFACE_API_KEY environment variable is not set');
  }
  return new HfInference(process.env.HUGGINGFACE_API_KEY);
}

export interface LessonGenerationOptions {
  outline: string;
  difficulty?: 'beginner' | 'intermediate' | 'advanced';
  duration?: number; // in minutes
  learningStyle?: 'visual' | 'auditory' | 'kinesthetic' | 'reading';
  includeExamples?: boolean;
  includeExercises?: boolean;
}

export interface GeneratedLesson {
  title: string;
  content: string;
  estimatedDuration: number;
  difficulty: string;
  keyConcepts: string[];
  prerequisites: string[];
}

export async function generateLessonWithHuggingFace(options: LessonGenerationOptions): Promise<GeneratedLesson> {
  const {
    outline,
    difficulty = 'intermediate',
    duration = 30,
    learningStyle = 'reading',
    includeExamples = true,
    includeExercises = true
  } = options;

  const prompt = `You are an expert educational content creator. Create a comprehensive lesson based on this outline: "${outline}"

Requirements:
- Difficulty Level: ${difficulty}
- Estimated Duration: ${duration} minutes
- Learning Style: ${learningStyle}
- Include Examples: ${includeExamples ? 'Yes' : 'No'}
- Include Exercises: ${includeExercises ? 'Yes' : 'No'}

Please generate a complete lesson with:
1. A compelling title (start with #)
2. Clear learning objectives
3. Structured content with examples
4. Key concepts highlighted
5. Practical applications
6. Summary and next steps

Format everything in proper markdown.`;

  try {
    const hf = getHuggingFaceClient();
    // Use a good open-source model for text generation
    const result = await hf.textGeneration({
      model: "meta-llama/Llama-2-7b-chat-hf", // Updated to working model
      inputs: prompt,
      parameters: {
        max_new_tokens: 2000,
        temperature: 0.7,
        do_sample: true,
        return_full_text: false
      }
    });

    const content = result.generated_text;
    if (!content) {
      throw new Error('No content generated by Hugging Face');
    }

    // Extract structured information from the generated content
    const title = extractTitle(content);
    const keyConcepts = extractKeyConcepts(content);
    const prerequisites = extractPrerequisites(content);
    const estimatedDuration = extractDuration(content) || duration;

    return {
      title,
      content,
      estimatedDuration,
      difficulty,
      keyConcepts,
      prerequisites
    };
  } catch (error) {
    console.error('Hugging Face API error:', error);
    throw new Error(`Failed to generate lesson with Hugging Face: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}

function extractTitle(content: string): string {
  const titleMatch = content.match(/^#\s+(.+)$/m);
  return titleMatch ? titleMatch[1] : 'Generated Lesson';
}

function extractKeyConcepts(content: string): string[] {
  const concepts: string[] = [];
  
  // Look for bullet points or numbered lists that might contain key concepts
  const lines = content.split('\n');
  let inKeyConceptsSection = false;
  
  for (const line of lines) {
    if (line.toLowerCase().includes('key concept') || line.toLowerCase().includes('main concept')) {
      inKeyConceptsSection = true;
      continue;
    }
    
    if (inKeyConceptsSection && (line.startsWith('- ') || line.startsWith('* ') || /^\d+\./.test(line))) {
      const concept = line.replace(/^[-*]\s+|\d+\.\s+/, '').trim();
      if (concept) concepts.push(concept);
    }
    
    if (inKeyConceptsSection && line.trim() === '') {
      inKeyConceptsSection = false;
    }
  }
  
  return concepts.length > 0 ? concepts : ['Core concepts from the lesson'];
}

function extractPrerequisites(content: string): string[] {
  const prerequisites: string[] = [];
  
  const lines = content.split('\n');
  let inPrerequisitesSection = false;
  
  for (const line of lines) {
    if (line.toLowerCase().includes('prerequisite') || line.toLowerCase().includes('required knowledge')) {
      inPrerequisitesSection = true;
      continue;
    }
    
    if (inPrerequisitesSection && (line.startsWith('- ') || line.startsWith('* ') || /^\d+\./.test(line))) {
      const prereq = line.replace(/^[-*]\s+|\d+\.\s+/, '').trim();
      if (prereq) prerequisites.push(prereq);
    }
    
    if (inPrerequisitesSection && line.trim() === '') {
      inPrerequisitesSection = false;
    }
  }
  
  return prerequisites.length > 0 ? prerequisites : ['Basic understanding of the topic'];
}

function extractDuration(content: string): number | null {
  const durationMatch = content.match(/(\d+)\s*(?:minute|min|hour|hr)/i);
  return durationMatch ? parseInt(durationMatch[1]) : null;
}
