import { HfInference } from '@huggingface/inference';
import { 
  getCombinedPrompt, 
  extractTitle, 
  extractKeyConcepts, 
  extractPrerequisites,
  countSectionsFromContent,
  type LessonGenerationOptions 
} from './prompts';

// Initialize Hugging Face client lazily to avoid errors when API key is not set
function getHuggingFaceClient() {
  if (!process.env.HUGGINGFACE_API_KEY) {
    throw new Error('HUGGINGFACE_API_KEY environment variable is not set');
  }
  return new HfInference(process.env.HUGGINGFACE_API_KEY);
}

export interface GeneratedLesson {
  title: string;
  content: string;
  estimatedSections: number;
  gradeLevel: string;
  keyConcepts: string[];
  prerequisites: string[];
}

export async function generateLessonWithHuggingFace(options: LessonGenerationOptions): Promise<GeneratedLesson> {
  const {
    gradeLevel = '2',
    sections = 4
  } = options;

  const prompt = getCombinedPrompt(options);

  try {
    const hf = getHuggingFaceClient();
    // Use a good open-source model for text generation
    const result = await hf.textGeneration({
      model: "meta-llama/Llama-2-7b-chat-hf", // Updated to working model
      inputs: prompt,
      parameters: {
        max_new_tokens: 2000,
        temperature: 0.7,
        do_sample: true,
        return_full_text: false
      }
    });

    const content = result.generated_text;
    if (!content) {
      throw new Error('No content generated by Hugging Face');
    }

    // Extract structured information from the generated content
    const title = extractTitle(content);
    const keyConcepts = extractKeyConcepts(content);
    const prerequisites = extractPrerequisites(content);
    const estimatedSections = countSectionsFromContent(content);

    return {
      title,
      content,
      estimatedSections,
      gradeLevel,
      keyConcepts,
      prerequisites
    };
  } catch (error) {
    console.error('Hugging Face API error:', error);
    throw new Error(`Failed to generate lesson with Hugging Face: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}
