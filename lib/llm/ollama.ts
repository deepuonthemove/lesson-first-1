import { 
  getCombinedPrompt, 
  extractTitle, 
  extractKeyConcepts, 
  extractPrerequisites,
  countSectionsFromContent,
  type LessonGenerationOptions 
} from './prompts';

export interface GeneratedLesson {
  title: string;
  content: string;
  estimatedSections: number;
  gradeLevel: string;
  keyConcepts: string[];
  prerequisites: string[];
}

export async function generateLessonWithOllama(options: LessonGenerationOptions): Promise<GeneratedLesson> {
  const {
    gradeLevel = '2',
    sections = 4
  } = options;

  const prompt = getCombinedPrompt(options);

  try {
    // Check if Ollama is running locally
    const ollamaUrl = process.env.OLLAMA_URL || 'http://localhost:11434';
    
    const response = await fetch(`${ollamaUrl}/api/generate`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'llama3.1:8b', // Free local model
        prompt: prompt,
        stream: false,
        options: {
          temperature: 0.7,
          num_predict: 2000
        }
      })
    });

    if (!response.ok) {
      throw new Error(`Ollama API error: ${response.status} ${response.statusText}`);
    }

    const result = await response.json();
    const content = result.response;

    if (!content) {
      throw new Error('No content generated by Ollama');
    }

    // Extract structured information from the generated content
    const title = extractTitle(content);
    const keyConcepts = extractKeyConcepts(content);
    const prerequisites = extractPrerequisites(content);
    const estimatedSections = countSectionsFromContent(content);

    return {
      title,
      content,
      estimatedSections,
      gradeLevel,
      keyConcepts,
      prerequisites
    };
  } catch (error) {
    console.error('Ollama API error:', error);
    throw new Error(`Failed to generate lesson with Ollama: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}
