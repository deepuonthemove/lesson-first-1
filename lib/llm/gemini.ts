import { GoogleGenerativeAI } from '@google/generative-ai';
import { 
  SYSTEM_PROMPT, 
  getUserPrompt, 
  extractTitle, 
  extractKeyConcepts, 
  extractPrerequisites, 
  extractDuration,
  type LessonGenerationOptions 
} from './prompts';

// Initialize Gemini client lazily to avoid errors when API key is not set
function getGeminiClient() {
  if (!process.env.GOOGLE_API_KEY) {
    throw new Error('GOOGLE_API_KEY environment variable is not set');
  }
  return new GoogleGenerativeAI(process.env.GOOGLE_API_KEY);
}

export interface GeneratedLesson {
  title: string;
  content: string;
  estimatedDuration: number;
  difficulty: string;
  keyConcepts: string[];
  prerequisites: string[];
}

export async function generateLessonWithGemini(options: LessonGenerationOptions): Promise<GeneratedLesson> {
  const {
    difficulty = 'intermediate',
    duration = 30
  } = options;

  const systemPrompt = SYSTEM_PROMPT;
  const userPrompt = getUserPrompt(options);

  try {
    const genAI = getGeminiClient();
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash-latest" }); // Updated to current model
    
    const result = await model.generateContent(`${systemPrompt}\n\n${userPrompt}`);
    const response = await result.response;
    const content = response.text();

    if (!content) {
      throw new Error('No content generated by Gemini');
    }

    // Extract structured information from the generated content
    const title = extractTitle(content);
    const keyConcepts = extractKeyConcepts(content);
    const prerequisites = extractPrerequisites(content);
    const estimatedDuration = extractDuration(content) || duration;

    return {
      title,
      content,
      estimatedDuration,
      difficulty,
      keyConcepts,
      prerequisites
    };
  } catch (error) {
    console.error('Gemini API error:', error);
    throw new Error(`Failed to generate lesson with Gemini: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}
